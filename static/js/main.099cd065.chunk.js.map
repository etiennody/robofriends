{"version":3,"sources":["constants.js","reducers.js","actions.js","api/api.js","components/Card.js","components/CardList.js","components/ErrorBoundry.js","components/Scroll.js","components/SearchBox.js","containers/App.js","reportWebVitals.js","index.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","initialStateSearch","searchField","initialStateRobots","isPending","robots","requestRobots","dispatch","url","type","fetch","then","response","json","data","payload","catch","error","Card","id","name","email","className","alt","src","CardList","map","user","i","ErrorBoundry","props","state","hasError","info","this","setState","children","Component","Scroll","style","overflowY","height","SearchBox","searchfield","searchChange","placeholder","onChange","App","onRequestRobots","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","event","text","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.099cd065.chunk.js","sourcesContent":["export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\n\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\n\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_FAILED,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS\n} from './constants.js';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload });\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: true,\n    robots: [],\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true });\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload });\n        default:\n            return state;\n    }\n}","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_FAILED,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS\n} from './constants';\n\nimport { apiCall } from './api/api';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    apiCall('https://jsonplaceholder.typicode.com/users')\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const apiCall = (url) =>\n    fetch(url)\n        .then(response => response.json())","import React from 'react';\n\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>{\n      robots.map((user, i) => {\n        return (\n          <Card\n            key={i}\n            id={robots[i].id}\n            name={robots[i].name}\n            email={robots[i].email}\n          />\n        );\n      })\n    }\n    </div>\n  );\n}\n\nexport default CardList;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Ooooops... That's not good</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflowY: 'scroll', height: '800px' }}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import './App.css';\n\nimport React, { Component } from 'react';\nimport { requestRobots, setSearchField } from '../actions';\n\nimport CardList from '../components/CardList';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Scroll from '../components/Scroll';\nimport SearchBox from '../components/SearchBox';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    })\n    return (\n      <div className='tc'>\n        <h1 className='f1'>RoboFriends</h1>\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          {\n            isPending ? <h1>Loading...</h1> :\n              <ErrorBoundry>\n                <CardList robots={filteredRobots} />\n              </ErrorBoundry>\n          }\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './index.css';\nimport 'tachyons';\n\nimport { applyMiddleware, combineReducers, createStore } from 'redux';\nimport { requestRobots, searchRobots } from './reducers';\n\nimport App from './containers/App';\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport thunk from 'redux-thunk';\n\nconst rootReducers = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducers, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />,\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}