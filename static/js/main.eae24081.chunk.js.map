{"version":3,"sources":["serviceWorkerRegistration.js","constants.js","reducers.js","actions.js","api/api.js","components/Card.js","components/CardList.js","components/ErrorBoundry.js","components/Header.js","components/Scroll.js","components/SearchBox.js","components/MainPage.js","containers/App.js","reportWebVitals.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","initialStateSearch","searchField","initialStateRobots","isPending","robots","requestRobots","dispatch","url","type","fetch","response","json","data","payload","Card","id","name","email","className","alt","src","CardList","map","user","i","ErrorBoundry","props","hasError","info","this","setState","children","Component","Header","nextProps","nextState","Scroll","style","overflowY","height","SearchBox","searchfield","searchChange","aria-label","placeholder","onChange","MainPage","filteredRobots","filter","robot","toLowerCase","includes","onRequestRobots","onSearchChange","App","connect","searchRobots","event","text","target","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducers","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.eae24081.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\n\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\n\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_FAILED,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS\n} from './constants.js';\n\nconst initialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n    switch (action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, { searchField: action.payload });\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: true,\n    robots: [],\n}\n\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\n    switch (action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true });\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false });\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false });\n        default:\n            return state;\n    }\n}","import {\n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_FAILED,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS\n} from './constants';\n\nimport { apiCall } from './api/api';\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    apiCall('https://jsonplaceholder.typicode.com/users')\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const apiCall = (url) =>\n    fetch(url)\n        .then(response => response.json())","import React from 'react';\n\nconst Card = ({ id, name, email }) => {\n  return (\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img alt=\"robots\" src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>{\n      robots.map((user, i) => {\n        return (\n          <Card\n            key={i}\n            id={robots[i].id}\n            name={robots[i].name}\n            email={robots[i].email}\n          />\n        );\n      })\n    }\n    </div>\n  );\n}\n\nexport default CardList;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>Ooooops... That's not good</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\n\nclass Header extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return false;\n    }\n    render() {\n        return <h1 className='f1'>RoboFriends</h1>\n    }\n}\n\nexport default Header;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflowY: 'scroll', height: '800px' }}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className='pa2'>\n      <input\n        aria-label='Search Robots'\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n      />\n    </div>\n  );\n}\n\nexport default SearchBox;","import './MainPage.css';\n\nimport React, { Component } from 'react';\n\nimport CardList from '../components/CardList';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Header from '../components/Header';\nimport Scroll from '../components/Scroll';\nimport SearchBox from '../components/SearchBox';\n\nclass MainPage extends Component {\n\n    componentDidMount() {\n        this.props.onRequestRobots();\n    }\n\n    filteredRobots = () => {\n        return this.props.robots.filter(robot => {\n            return robot.name.toLowerCase().includes(this.props.searchField.toLowerCase());\n        })\n    }\n\n    render() {\n        const { onSearchChange, isPending } = this.props;\n        return (\n            <div className='tc'>\n                <Header />\n                <SearchBox searchChange={onSearchChange} />\n                <Scroll>\n                    {\n                        isPending ? <h1>Loading...</h1> :\n                            <ErrorBoundry>\n                                <CardList robots={this.filteredRobots()} />\n                            </ErrorBoundry>\n                    }\n                </Scroll>\n            </div>\n        );\n    }\n}\n\nexport default (MainPage);","import './App.css';\n\nimport React, { Component } from 'react';\nimport { requestRobots, setSearchField } from '../actions';\n\nimport MainPage from '../components/MainPage';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n  render() {\n    return <MainPage {...this.props} />\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './index.css';\nimport 'tachyons';\n\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nimport { applyMiddleware, combineReducers, createStore } from 'redux';\nimport { requestRobots, searchRobots } from './reducers';\n\nimport App from './containers/App';\nimport { Provider } from 'react-redux';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport thunk from 'redux-thunk';\n\nconst rootReducers = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducers, applyMiddleware(thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />,\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}